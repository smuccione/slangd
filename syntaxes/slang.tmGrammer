<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>slang</string>
    <key>scopeName</key>
    <string>source.slang</string>
    <key>fileTypes</key>
    <array>
      <string>sl</string>
    </array>
    <key>uuid</key>
    <string>8BE8B5D-894F-421A-B56B-912150753ECA</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#preprocessor</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#directives</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#declarations</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#script-top-level</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>directives</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#extern-alias-directive</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#using-directive</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>declarations</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#namespace-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-declarations</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>script-top-level</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#slang-function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>type-declarations</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#delegate-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#enum-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#interface-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#record-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#struct-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>class-or-struct-members</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-declarations</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#property-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#field-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#event-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#indexer-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constructor-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructor-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#conversion-operator-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>interface-members</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#property-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#event-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#indexer-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#while-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#do-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#for-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#foreach-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#else-part</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#goto-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#return-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#break-or-continue-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#throw-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#yield-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#await-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#try-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#checked-unchecked-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#lock-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#using-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#labeled-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#anonymous-object-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#local-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#checked-unchecked-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#typeof-or-default-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#nameof-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#throw-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#interpolated-string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#verbatim-interpolated-string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#this-or-base-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#conditional-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#await-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#query-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#as-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#is-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#anonymous-method-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#anonymous-object-creation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invocation-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member-access-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#element-access-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#cast-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-deconstruction-assignment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#initializer-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#identifier</string>
          </dict>
        </array>
      </dict>
      <key>extern-alias-directive</key>
      <dict>
        <key>begin</key>
        <string>\s*(extern)\b\s*(alias)\b\s*(@?[_[:alpha:]][_[:alnum:]]*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.extern</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.alias</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>variable.other.alias</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
      </dict>
      <key>using-directive</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(using)\b\s+(static)\s+</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.using</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.static</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(using)\s+(?=(@?[_[:alpha:]][_[:alnum:]]*)\s*=)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.using</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.alias</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#operator-assignment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(using)\s*</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.using</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>name</key>
                <string>entity.name.type.namespace</string>
                <key>match</key>
                <string>@?[_[:alpha:]][_[:alnum:]]*</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#operator-assignment</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>attribute</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-arguments</string>
          </dict>
        </array>
      </dict>
      <key>attribute-arguments</key>
      <dict>
        <key>begin</key>
        <string>(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#attribute-named-argument</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>attribute-named-argument</key>
      <dict>
        <key>begin</key>
        <string>(@?[_[:alpha:]][_[:alnum:]]*)\s*(?==)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.property</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(,|\)))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#operator-assignment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>namespace-declaration</key>
      <dict>
        <key>begin</key>
        <string>\b(namespace)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.namespace</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.namespace</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-accessor</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#using-directive</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-semicolon</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>storage-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier</string>
        <key>match</key>
        <string>(?&lt;!\.)\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref)\b</string>
      </dict>
      <key>class-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=\bclass\b)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              \b(class)\b\s+
              (@?[_[:alpha:]][_[:alnum:]]*)\s*
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.class</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#base-types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#generic-constraints</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#class-or-struct-members</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>delegate-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?:\b(delegate)\b)\s+
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          (\g&lt;identifier&gt;)\s*
          (&lt;([^&lt;&gt;]+)&gt;)?\s*
          (?=\()
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.delegate</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.delegate</string>
          </dict>
          <key>8</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generic-constraints</string>
          </dict>
        </array>
      </dict>
      <key>enum-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=\benum\b)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?=enum)</string>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(enum)\s+(@?[_[:alpha:]][_[:alnum:]]*)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.enum</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.type.enum</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>begin</key>
                <string>:</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.colon</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\{)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#attribute-section</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>@?[_[:alpha:]][_[:alnum:]]*</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.variable.enum-member</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=(,|\}))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#comment</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#variable-initializer</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>interface-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=\binterface\b)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (interface)\b\s+
              (@?[_[:alpha:]][_[:alnum:]]*)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.interface</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.interface</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#base-types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#generic-constraints</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-members</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>record-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=\brecord\b)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (record)\b\s+
              (@?[_[:alpha:]][_[:alnum:]]*)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.record</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.record</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#base-types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#generic-constraints</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#class-or-struct-members</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>struct-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=\bstruct\b)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (struct)\b\s+
              (@?[_[:alpha:]][_[:alnum:]]*)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.struct</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.struct</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#base-types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#generic-constraints</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#class-or-struct-members</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>type-parameter-list</key>
      <dict>
        <key>begin</key>
        <string>\&lt;</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.end</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(in|out)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(@?[_[:alpha:]][_[:alnum:]]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.type-parameter</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
        </array>
      </dict>
      <key>base-types</key>
      <dict>
        <key>begin</key>
        <string>:</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\{|where)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
        </array>
      </dict>
      <key>generic-constraints</key>
      <dict>
        <key>begin</key>
        <string>(where)\s+(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.where</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\{|where|;|=&gt;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.other.class</string>
            <key>match</key>
            <string>\bclass\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.struct</string>
            <key>match</key>
            <string>\bstruct\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(new)\s*(\()\s*(\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.new</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generic-constraints</string>
          </dict>
        </array>
      </dict>
      <key>field-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          (\g&lt;identifier&gt;)\s* # first field name
          (?!=&gt;|==)(?=,|;|=|$)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.field</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>entity.name.variable.field</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-struct-members</string>
          </dict>
        </array>
      </dict>
      <key>property-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)

          # The negative lookahead below ensures that we don't match nested types
          # or other declarations as properties.
          (?![[:word:][:space:]]*\b(?:class|interface|struct|enum|event)\b)

          (?&lt;return_type&gt;
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          )
          (?&lt;interface_name&gt;\g&lt;type_name&gt;\s*\.\s*)?
          (?&lt;property_name&gt;\g&lt;identifier&gt;)\s*
          (?=\{|=&gt;|$)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-accessor</string>
              </dict>
            </array>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.property</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#property-accessors</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-struct-members</string>
          </dict>
        </array>
      </dict>
      <key>indexer-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;return_type&gt;
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          )
          (?&lt;interface_name&gt;\g&lt;type_name&gt;\s*\.\s*)?
          (?&lt;indexer_name&gt;this)\s*
          (?=\[)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-accessor</string>
              </dict>
            </array>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>keyword.other.this</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#bracketed-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#property-accessors</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>event-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(event)\b\s*
          (?&lt;return_type&gt;
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          )
          (?&lt;interface_name&gt;\g&lt;type_name&gt;\s*\.\s*)?
          (?&lt;event_names&gt;\g&lt;identifier&gt;(?:\s*,\s*\g&lt;identifier&gt;)*)\s*
          (?=\{|;|$)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.event</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>8</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-accessor</string>
              </dict>
            </array>
          </dict>
          <key>9</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.name.variable.event</string>
                <key>match</key>
                <string>@?[_[:alpha:]][_[:alnum:]]*</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#event-accessors</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>property-accessors</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
            <key>match</key>
            <string>\b(private|protected|internal)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.get</string>
            <key>match</key>
            <string>\b(get)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.set</string>
            <key>match</key>
            <string>\b(set)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.init</string>
            <key>match</key>
            <string>\b(init)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>event-accessors</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.other.add</string>
            <key>match</key>
            <string>\b(add)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.remove</string>
            <key>match</key>
            <string>\b(remove)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>slang-function-declaration</key>
      <dict>
        <key>include</key>
        <string>#type</string>
        <key>begin</key>
        <string>(?&lt;!\.)\b(?i:function)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
        </dict>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>

      <key>method-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;return_type&gt;
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          )
          (?&lt;interface_name&gt;\g&lt;type_name&gt;\s*\.\s*)?
          (\g&lt;identifier&gt;)\s*
          (&lt;([^&lt;&gt;]+)&gt;)?\s*
          (?=\()
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-accessor</string>
              </dict>
            </array>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
          <key>9</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-parameter-list</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generic-constraints</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>constructor-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?=@?[_[:alpha:]][_[:alnum:]]*\s*\()</string>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(@?[_[:alpha:]][_[:alnum:]]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.colon</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{|=&gt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#constructor-initializer</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>constructor-initializer</key>
      <dict>
        <key>begin</key>
        <string>\b(?:(base)|(this))\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.base</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.this</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#argument-list</string>
          </dict>
        </array>
      </dict>
      <key>destructor-declaration</key>
      <dict>
        <key>begin</key>
        <string>(~)(@?[_[:alpha:]][_[:alnum:]]*)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.tilde</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>operator-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s*
          (?&lt;operator_keyword&gt;(?:\b(?:operator)))\s*
          (?&lt;operator&gt;(?:\+|-|\*|/|%|&amp;|\||\^|\&lt;\&lt;|\&gt;\&gt;|==|!=|\&gt;|\&lt;|\&gt;=|\&lt;=|!|~|\+\+|--|true|false))\s*
          (?=\()
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.other.operator-decl</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>conversion-operator-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;explicit_or_implicit_keyword&gt;(?:\b(?:explicit|implicit)))\s*
          (?&lt;operator_keyword&gt;(?:\b(?:operator)))\s*
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s*
          (?=\()
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\b(explicit)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.explicit</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(implicit)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.implicit</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.operator-decl</string>
          </dict>
          <key>3</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameter-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>block</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>variable-initializer</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!=|!)(=)(?!=|&gt;)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,\)\];}])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#ref-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>expression-body</key>
      <dict>
        <key>begin</key>
        <string>=&gt;</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.arrow</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,\);}])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#ref-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>goto-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(goto)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.goto</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(case)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.case</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(default)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.default</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.label</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>return-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(return)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#ref-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>break-or-continue-statement</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(?:(break)|(continue))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.break</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.continue</string>
          </dict>
        </dict>
      </dict>
      <key>throw-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(throw)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.throw</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>yield-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#yield-return-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#yield-break-statement</string>
          </dict>
        </array>
      </dict>
      <key>yield-return-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(yield)\b\s*\b(return)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.yield</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>yield-break-statement</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(yield)\b\s*\b(break)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.yield</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.break</string>
          </dict>
        </dict>
      </dict>
      <key>await-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(await)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.await</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>if-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(if)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.if</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>else-part</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(else)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.else</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>switch-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(switch)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.switch</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#switch-label</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#statement</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>switch-expression</key>
      <dict>
        <key>begin</key>
        <string>(?x) (?&lt;!\.)\b(switch)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.switch</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.curlybrace.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literal</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#switch-var-pattern</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#switch-property-expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#member-access-expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#switch-pattern</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression-body</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>switch-pattern</key>
      <dict>
        <key>begin</key>
        <string>
          (?x) # e.g. int x OR var x
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          (\g&lt;identifier&gt;)\b\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?==&gt;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-when-clause</string>
          </dict>
        </array>
      </dict>
      <key>switch-property-expression</key>
      <dict>
        <key>begin</key>
        <string>
          (?x) # e.g. int x OR var x
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?\s*
          (\{)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>switch-var-pattern</key>
      <dict>
        <key>begin</key>
        <string>
          (?x) # match foreach (var (x, y) in ...)
          (?:\b(var)\b\s*)
          (?&lt;tuple&gt;\((?:[^\(\)]|\g&lt;tuple&gt;)+\))\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.var</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#tuple-declaration-deconstruction-element-list</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?==&gt;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-when-clause</string>
          </dict>
        </array>
      </dict>
      <key>switch-when-clause</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(when)\b\s*(\()?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.try.when</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?==&gt;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\(</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>switch-label</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;!\.)\b(case)\b\s+</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.case</string>
              </dict>
            </dict>
            <key>end</key>
            <string>:</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.colon</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(default)\b\s*(:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.default</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.colon</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>do-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(do)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.do</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>while-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(while)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.while</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>for-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(for)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.for</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#local-variable-declaration</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-semicolon</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>foreach-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(foreach)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.foreach</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>
                  (?x)
                  (?:
                  (\bvar\b)|
                  (?&lt;type_name&gt;
                  (?:
                  (?:
                  (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
                  (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
                  \g&lt;identifier&gt;\s*
                  (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
                  )
                  (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
                  (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
                  )
                  (?:\s*\?\s*)? # nullable suffix?
                  (?:\s* # array suffix?
                  \[
                  (?:\s*,\s*)* # commata for multi-dimensional arrays
                  \]
                  \s*
                  (?:\?)? # arrays can be nullable reference types
                  \s*
                  )*
                  )
                  )
                  )\s+
                  (\g&lt;identifier&gt;)\s+
                  \b(in)\b
                </string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.var</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#type</string>
                      </dict>
                    </array>
                  </dict>
                  <key>7</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.variable.local</string>
                  </dict>
                  <key>8</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.loop.in</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>
                  (?x) # match foreach (var (x, y) in ...)
                  (?:\b(var)\b\s*)?
                  (?&lt;tuple&gt;\((?:[^\(\)]|\g&lt;tuple&gt;)+\))\s+
                  \b(in)\b
                </string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.var</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#tuple-declaration-deconstruction-element-list</string>
                      </dict>
                    </array>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.loop.in</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>try-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#try-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#catch-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#finally-clause</string>
          </dict>
        </array>
      </dict>
      <key>try-block</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(try)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.try</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>finally-clause</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(finally)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.try.finally</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>catch-clause</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(catch)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.try.catch</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>
                  (?x)
                  (?&lt;type_name&gt;
                  (?:
                  (?:
                  (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
                  (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
                  \g&lt;identifier&gt;\s*
                  (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
                  )
                  (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
                  (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
                  )
                  (?:\s*\?\s*)? # nullable suffix?
                  (?:\s* # array suffix?
                  \[
                  (?:\s*,\s*)* # commata for multi-dimensional arrays
                  \]
                  \s*
                  (?:\?)? # arrays can be nullable reference types
                  \s*
                  )*
                  )
                  )\s*
                  (?:(\g&lt;identifier&gt;)\b)?
                </string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#type</string>
                      </dict>
                    </array>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.variable.local</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#when-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>when-clause</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(when)\b\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.try.when</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>checked-unchecked-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(?:(checked)|(unchecked))\b\s*(?!\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.checked</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.unchecked</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>lock-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(lock)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.lock</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>using-statement</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(using)\b\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.using</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\;|})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#local-variable-declaration</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>labeled-statement</key>
      <dict>
        <key>match</key>
        <string>(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.label</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
      </dict>
      <key>local-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#local-constant-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#local-variable-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#local-function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#local-tuple-var-deconstruction</string>
          </dict>
        </array>
      </dict>
      <key>local-variable-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?:
          (?:(\busing)\s+)?
          (?:(\bref)\s+(?:(\breadonly)\s+)?)?(\bvar\b)| # ref local
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+(?:readonly\s+)?)?   # ref local
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )
          )\s+
          (\g&lt;identifier&gt;)\s*
          (?!=&gt;)
          (?=,|;|=|\))
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.using</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.other.var</string>
          </dict>
          <key>5</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>10</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>local-constant-declaration</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?&lt;const_keyword&gt;\b(?:const)\b)\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          (\g&lt;identifier&gt;)\s*
          (?=,|;|=)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>local-function-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
        </array>
      </dict>
      <key>local-tuple-var-deconstruction</key>
      <dict>
        <key>begin</key>
        <string>
          (?x) # e.g. var (x, y) = GetPoint();
          (?:\b(var)\b\s*)
          (?&lt;tuple&gt;\((?:[^\(\)]|\g&lt;tuple&gt;)+\))\s*
          (?=;|=|\))
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.var</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#tuple-declaration-deconstruction-element-list</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>tuple-deconstruction-assignment</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))\s*
          (?!=&gt;|==)(?==)
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#tuple-deconstruction-element-list</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>tuple-declaration-deconstruction-element-list</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-declaration-deconstruction-element-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration-expression-tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>match</key>
            <string>
              (?x) # e.g. x
              (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
              (?=[,)])
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.variable.tuple-element</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>tuple-deconstruction-element-list</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-deconstruction-element-list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration-expression-tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>match</key>
            <string>
              (?x) # e.g. x
              (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
              (?=[,)])
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>declaration-expression-local</key>
      <dict>
        <key>match</key>
        <string>
          (?x) # e.g. int x OR var x
          (?:
          \b(var)\b|
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )
          )\s+
          (\g&lt;identifier&gt;)\b\s*
          (?=[,)\]])
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.var</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.local</string>
          </dict>
        </dict>
      </dict>
      <key>declaration-expression-tuple</key>
      <dict>
        <key>match</key>
        <string>
          (?x) # e.g. int x OR var x
          (?:
          \b(var)\b|
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )
          )\s+
          (\g&lt;identifier&gt;)\b\s*
          (?=[,)])
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.var</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.tuple-element</string>
          </dict>
        </dict>
      </dict>
      <key>checked-unchecked-expression</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(?:(checked)|(unchecked))\b\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.checked</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.unchecked</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>typeof-or-default-expression</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(?:(typeof)|(default))\b\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.typeof</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.default</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>nameof-expression</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(nameof)\b\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.nameof</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>throw-expression</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(throw)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.throw</string>
          </dict>
        </dict>
      </dict>
      <key>interpolated-string</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double</string>
        <key>begin</key>
        <string>\$"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(")|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#interpolation</string>
          </dict>
        </array>
      </dict>
      <key>verbatim-interpolated-string</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double</string>
        <key>begin</key>
        <string>(?:\$@|@\$)"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"(?=[^"])</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#verbatim-string-character-escape</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#interpolation</string>
          </dict>
        </array>
      </dict>
      <key>interpolation</key>
      <dict>
        <key>name</key>
        <string>meta.interpolation</string>
        <key>begin</key>
        <string>(?&lt;=[^\{]|^)((?:\{\{)*)(\{)(?=[^\{])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.interpolation.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.interpolation.end</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#boolean-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#null-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#char-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#verbatim-string-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-literal</string>
          </dict>
        </array>
      </dict>
      <key>boolean-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.true</string>
            <key>match</key>
            <string>(?&lt;!\.)\btrue\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.false</string>
            <key>match</key>
            <string>(?&lt;!\.)\bfalse\b</string>
          </dict>
        </array>
      </dict>
      <key>null-literal</key>
      <dict>
        <key>name</key>
        <string>constant.language.null</string>
        <key>match</key>
        <string>(?&lt;!\.)\bnull\b</string>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\w)\.?\d(?:(?:[0-9a-zA-Z_\.]|_)|(?&lt;=[eE])[+-])*</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=.)</string>
                <key>end</key>
                <string>$</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9])|\.(?=[0-9])))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?&lt;!_)([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.decimals</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.exponent</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic</string>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic</string>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>12</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[bB])([01_](?:[01_]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.preffix.binary</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.binary</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.preffix.hex</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hex</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?&lt;!_)([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.exponent</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands</string>
                          </dict>
                        </array>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?:(?:[0-9a-zA-Z_\.]|_)|(?&lt;=[eE])[+-])+</string>
                    <key>name</key>
                    <string>invalid.illegal.constant.numeric</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>char-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.single</string>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.char.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\')|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.char.end</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#char-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>char-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape</string>
        <key>match</key>
        <string>\\(['"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})</string>
      </dict>
      <key>string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double</string>
        <key>begin</key>
        <string>(?&lt;!@)"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(")|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape</string>
        <key>match</key>
        <string>\\(['"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})</string>
      </dict>
      <key>verbatim-string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double</string>
        <key>begin</key>
        <string>@"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"(?=[^"])</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#verbatim-string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>verbatim-string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape</string>
        <key>match</key>
        <string>""</string>
      </dict>
      <key>tuple-literal</key>
      <dict>
        <key>begin</key>
        <string>(\()(?=.*[:,])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-literal-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>tuple-literal-element</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?:(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)\s*)?
          (?![,)])
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.tuple-element</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>expression-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound</string>
            <key>match</key>
            <string>\*=|/=|%=|\+=|-=|\?\?=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound.bitwise</string>
            <key>match</key>
            <string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|\|=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.bitwise.shift</string>
            <key>match</key>
            <string>&lt;&lt;|&gt;&gt;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.comparison</string>
            <key>match</key>
            <string>==|!=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.relational</string>
            <key>match</key>
            <string>&lt;=|&gt;=|&lt;|&gt;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.relational</string>
            <key>match</key>
            <string>&lt;:|:&gt;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical</string>
            <key>match</key>
            <string>\!|&amp;&amp;|\|\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.bitwise</string>
            <key>match</key>
            <string>\&amp;|~|\^|\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment</string>
            <key>match</key>
            <string>\=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.decrement</string>
            <key>match</key>
            <string>--</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.increment</string>
            <key>match</key>
            <string>\+\+</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.arithmetic</string>
            <key>match</key>
            <string>%|\*|/|-|\+</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.null-coalescing</string>
            <key>match</key>
            <string>\?\?</string>
          </dict>
        </array>
      </dict>
      <key>switch-literal</key>
      <dict>
        <key>name</key>
        <string>constant.language.null</string>
        <key>match</key>
        <string>(?&lt;!\.)\bnull\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.language.null</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-body</string>
          </dict>
        </array>
      </dict>
      <key>conditional-operator</key>
      <dict>
        <key>begin</key>
        <string>\?(?!\s*[?.\[]|\s*$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.conditional.question-mark</string>
          </dict>
        </dict>
        <key>end</key>
        <string>:</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.conditional.colon</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>await-expression</key>
      <dict>
        <key>name</key>
        <string>keyword.other.await</string>
        <key>match</key>
        <string>(?!\.)\b(await)\b</string>
      </dict>
      <key>parenthesized-expression</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>initializer-expression</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>identifier</key>
      <dict>
        <key>name</key>
        <string>variable.other.readwrite</string>
        <key>match</key>
        <string>@?[_[:alpha:]][_[:alnum:]]*</string>
      </dict>
      <key>cast-expression</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (\()\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s*
          (\))(?=\s*-*!*@?[_[:alnum:]\(])
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
      </dict>
      <key>as-expression</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?&lt;!\.)\b(as)\b\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.as</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>is-expression</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?&lt;!\.)\b(is)\b\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.is</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>this-or-base-expression</key>
      <dict>
        <key>match</key>
        <string>\b(?:(base)|(this))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.base</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.this</string>
          </dict>
        </dict>
      </dict>
      <key>invocation-expression</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?:(\?)\s*)?                                     # preceding null-conditional operator?
          (?:(\.)\s*)?                                     # preceding dot?
          (@?[_[:alpha:]][_[:alnum:]]*)\s*                   # method name
          (?&lt;type_args&gt;\s*&lt;([^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?\s* # type arguments
          (?=\()                                           # open paren of argument list
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.null-conditional</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-arguments</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#argument-list</string>
          </dict>
        </array>
      </dict>
      <key>element-access-expression</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (?:(\?)\s*)?                        # preceding null-conditional operator?
          (?:(\.)\s*)?                        # preceding dot?
          (?:(@?[_[:alpha:]][_[:alnum:]]*)\s*)? # property name
          (?:(\?)\s*)?                        # null-conditional operator?
          (?=\[)                              # open bracket of argument list
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.null-conditional</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>variable.other.object.property</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.null-conditional</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\])(?!\s*\[)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#bracketed-argument-list</string>
          </dict>
        </array>
      </dict>
      <key>member-access-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>
              (?x)
              (?:(\?)\s*)?                   # preceding null-conditional operator?
              (\.)\s*                        # preceding dot
              (@?[_[:alpha:]][_[:alnum:]]*)\s* # property name
              (?![_[:alnum:]]|\(|(\?)?\[|&lt;)  # next character is not alpha-numeric, nor a (, [, or &lt;. Also, test for ?[
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.null-conditional</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.object.property</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>
              (?x)
              (\.)?\s*
              (@?[_[:alpha:]][_[:alnum:]]*)
              (?&lt;type_params&gt;\s*&lt;([^&lt;&gt;]|\g&lt;type_params&gt;)+&gt;\s*)
              (?=
              (\s*\?)?
              \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
              )
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.object</string>
              </dict>
              <key>3</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type-arguments</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>
              (?x)
              (@?[_[:alpha:]][_[:alnum:]]*)
              (?=
              (\s*\?)?
              \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
              )
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.object</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>object-creation-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-creation-expression-with-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-creation-expression-with-no-parameters</string>
          </dict>
        </array>
      </dict>
      <key>object-creation-expression-with-parameters</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          (new)\s+
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s*
          (?=\()
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.new</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#argument-list</string>
          </dict>
        </array>
      </dict>
      <key>object-creation-expression-with-no-parameters</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (new)\s+
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s*
          (?=\{|$)
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.new</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>array-creation-expression</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(new|stackalloc)\b\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?\s*
          (?=\[)
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.new</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#bracketed-argument-list</string>
          </dict>
        </array>
      </dict>
      <key>anonymous-object-creation-expression</key>
      <dict>
        <key>begin</key>
        <string>\b(new)\b\s*(?=\{|$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.new</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#initializer-expression</string>
          </dict>
        </array>
      </dict>
      <key>bracketed-parameter-list</key>
      <dict>
        <key>begin</key>
        <string>(?=(\[))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(\]))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;=\[)</string>
            <key>end</key>
            <string>(?=\])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#attribute-section</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#parameter</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variable-initializer</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>parenthesized-parameter-list</key>
      <dict>
        <key>begin</key>
        <string>(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>parameter</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?:(?:\b(ref|params|out|in|this)\b)\s+)?
          (?&lt;type_name&gt;
          (?:
          (?:ref\s+)?   # ref return
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+
          (\g&lt;identifier&gt;)
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.parameter</string>
          </dict>
        </dict>
      </dict>
      <key>argument-list</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#named-argument</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#argument</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>bracketed-argument-list</key>
      <dict>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#named-argument</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#argument</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>named-argument</key>
      <dict>
        <key>begin</key>
        <string>(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.parameter</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(,|\)|\]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#argument</string>
          </dict>
        </array>
      </dict>
      <key>argument</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
            <key>match</key>
            <string>\b(ref|out|in)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration-expression-local</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>query-expression</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(from)\b\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?
          \s+(\g&lt;identifier&gt;)\b\s*
          \b(in)\b\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.from</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.range-variable</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>keyword.query.in</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>query-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#let-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#where-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#join-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#orderby-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#select-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#group-clause</string>
          </dict>
        </array>
      </dict>
      <key>let-clause</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(let)\b\s*
          (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
          (=)\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.let</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.range-variable</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>where-clause</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(where)\b\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.where</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>join-clause</key>
      <dict>
        <key>begin</key>
        <string>
          (?x)
          \b(join)\b\s*
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )?
          \s+(\g&lt;identifier&gt;)\b\s*
          \b(in)\b\s*
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.join</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.range-variable</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>keyword.query.in</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#join-on</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#join-equals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#join-into</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>join-on</key>
      <dict>
        <key>match</key>
        <string>\b(on)\b\s*</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.on</string>
          </dict>
        </dict>
      </dict>
      <key>join-equals</key>
      <dict>
        <key>match</key>
        <string>\b(equals)\b\s*</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.equals</string>
          </dict>
        </dict>
      </dict>
      <key>join-into</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          \b(into)\b\s*
          (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.into</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.range-variable</string>
          </dict>
        </dict>
      </dict>
      <key>orderby-clause</key>
      <dict>
        <key>begin</key>
        <string>\b(orderby)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.orderby</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#ordering-direction</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>ordering-direction</key>
      <dict>
        <key>match</key>
        <string>\b(?:(ascending)|(descending))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.ascending</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.query.descending</string>
          </dict>
        </dict>
      </dict>
      <key>select-clause</key>
      <dict>
        <key>begin</key>
        <string>\b(select)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.select</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>group-clause</key>
      <dict>
        <key>begin</key>
        <string>\b(group)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.group</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#group-by</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#group-into</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#query-body</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>group-by</key>
      <dict>
        <key>match</key>
        <string>\b(by)\b\s*</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.by</string>
          </dict>
        </dict>
      </dict>
      <key>group-into</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          \b(into)\b\s*
          (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.query.into</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.range-variable</string>
          </dict>
        </dict>
      </dict>
      <key>anonymous-method-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (?:\b(async)\b\s*)?
              (@?[_[:alpha:]][_[:alnum:]]*)\b\s*
              (=&gt;)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.variable.parameter</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.arrow</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\)|;|}|,)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#ref-modifier</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (?:\b(async)\b\s*)?
              (\(.*?\))\s*
              (=&gt;)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#lambda-parameter-list</string>
                  </dict>
                </array>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.arrow</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\)|;|}|,)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#ref-modifier</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>
              (?x)
              (?:\b(async)\b\s*)?
              (?:\b(delegate)\b\s*)
            </string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.delegate</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\)|;|}|,)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parenthesized-parameter-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>lambda-parameter-list</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attribute-section</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#lambda-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>lambda-parameter</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?:\b(ref|out|in)\b)?\s*
          (?:(?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )\s+)?
          (\g&lt;identifier&gt;)\b\s*
          (?=[,)])
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.parameter</string>
          </dict>
        </dict>
      </dict>
      <key>type</key>
      <dict>
        <key>name</key>
        <string>meta.type</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#ref-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#readonly-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-builtin</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-arguments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-array-suffix</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-nullable-suffix</string>
          </dict>
        </array>
      </dict>
      <key>ref-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier</string>
        <key>match</key>
        <string>\b(ref)\b</string>
      </dict>
      <key>readonly-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier</string>
        <key>match</key>
        <string>\b(readonly)\b</string>
      </dict>
      <key>tuple-type</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#tuple-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>tuple-element</key>
      <dict>
        <key>match</key>
        <string>
          (?x)
          (?&lt;type_name&gt;
          (?:
          (?:
          (?:(?&lt;identifier&gt;@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
          (?&lt;name_and_type_args&gt; # identifier + type arguments (if any)
          \g&lt;identifier&gt;\s*
          (?&lt;type_args&gt;\s*&lt;(?:[^&lt;&gt;]|\g&lt;type_args&gt;)+&gt;\s*)?
          )
          (?:\s*\.\s*\g&lt;name_and_type_args&gt;)* | # Are there any more names being dotted into?
          (?&lt;tuple&gt;\s*\((?:[^\(\)]|\g&lt;tuple&gt;)+\))
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s* # array suffix?
          \[
          (?:\s*,\s*)* # commata for multi-dimensional arrays
          \]
          \s*
          (?:\?)? # arrays can be nullable reference types
          \s*
          )*
          )
          )
          (?:(?&lt;tuple_name&gt;\g&lt;identifier&gt;)\b)?
        </string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.tuple-element</string>
          </dict>
        </dict>
      </dict>
      <key>type-builtin</key>
      <dict>
        <key>match</key>
        <string>\b(null,nil,integer,float,double,string,object,variant,local,static)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
        </dict>
      </dict>
      <key>type-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(@?[_[:alpha:]][_[:alnum:]]*)\s*(\:\:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.alias</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.coloncolon</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
            <key>match</key>
            <string>@?[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>type-arguments</key>
      <dict>
        <key>begin</key>
        <string>&lt;</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.end</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>type-array-suffix</key>
      <dict>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.open</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.close</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>type-nullable-suffix</key>
      <dict>
        <key>match</key>
        <string>\?</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.question-mark</string>
          </dict>
        </dict>
      </dict>
      <key>operator-assignment</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.assignment</string>
        <key>match</key>
        <string>(?&lt;!=|!)(=)(?!=)</string>
      </dict>
      <key>punctuation-comma</key>
      <dict>
        <key>name</key>
        <string>punctuation.separator.comma</string>
        <key>match</key>
        <string>,</string>
      </dict>
      <key>punctuation-semicolon</key>
      <dict>
        <key>name</key>
        <string>punctuation.terminator.statement</string>
        <key>match</key>
        <string>;</string>
      </dict>
      <key>punctuation-accessor</key>
      <dict>
        <key>name</key>
        <string>punctuation.accessor</string>
        <key>match</key>
        <string>\.</string>
      </dict>
      <key>preprocessor</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor</string>
        <key>begin</key>
        <string>^\s*(\#)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.hash</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-define-or-undef</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-if-or-elif</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-else-or-endif</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-warning-or-error</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-region</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-endregion</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-load</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-r</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-line</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-pragma-warning</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-pragma-checksum</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-define-or-undef</key>
      <dict>
        <key>match</key>
        <string>\b(?:(define)|(undef))\b\s*\b([_[:alpha:]][_[:alnum:]]*)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.define</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.undef</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.preprocessor.symbol</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-if-or-elif</key>
      <dict>
        <key>begin</key>
        <string>\b(?:(if)|(elif))\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.if</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.elif</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-expression</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-else-or-endif</key>
      <dict>
        <key>match</key>
        <string>\b(?:(else)|(endif))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.else</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.endif</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-warning-or-error</key>
      <dict>
        <key>match</key>
        <string>\b(?:(warning)|(error))\b\s*(.*)(?=$)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.warning</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.error</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>string.unquoted.preprocessor.message</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-load</key>
      <dict>
        <key>begin</key>
        <string>\b(load)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.load</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\"[^"]*\"</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>string.quoted.double</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-r</key>
      <dict>
        <key>begin</key>
        <string>\b(r)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.r</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\"[^"]*\"</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>string.quoted.double</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-region</key>
      <dict>
        <key>match</key>
        <string>\b(region)\b\s*(.*)(?=$)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.region</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>string.unquoted.preprocessor.message</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-endregion</key>
      <dict>
        <key>match</key>
        <string>\b(endregion)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.endregion</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-line</key>
      <dict>
        <key>begin</key>
        <string>\b(line)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.line</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(?:(default|hidden))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.default</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.hidden</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>[0-9]+</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\"[^"]*\"</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>string.quoted.double</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-pragma-warning</key>
      <dict>
        <key>match</key>
        <string>\b(pragma)\b\s*\b(warning)\b\s*\b(?:(disable)|(restore))\b(\s*[0-9]+(?:\s*,\s*[0-9]+)?)?</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.pragma</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.warning</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.disable</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.restore</string>
          </dict>
          <key>5</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>[0-9]+</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>constant.numeric.decimal</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-pragma-checksum</key>
      <dict>
        <key>match</key>
        <string>\b(pragma)\b\s*\b(checksum)\b\s*(\"[^"]*\")\s*(\"[^"]*\")\s*(\"[^"]*\")</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.pragma</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.checksum</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.open</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.parenthesis.close</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.language.boolean.true</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.language.boolean.false</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.variable.preprocessor.symbol</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(==|!=)|(\!|&amp;&amp;|\|\|)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.comparison</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.logical</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block</string>
            <key>begin</key>
            <string>/\*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^\s+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.block.documentation</string>
                <key>begin</key>
                <string>(?&lt;!/)///(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#xml-doc-comment</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash</string>
                <key>begin</key>
                <string>(?&lt;!/)//(?:(?!/)|(?=//))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>xml-doc-comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#xml-comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#xml-character-entity</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#xml-cdata</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#xml-tag</string>
          </dict>
        </array>
      </dict>
      <key>xml-tag</key>
      <dict>
        <key>name</key>
        <string>meta.tag</string>
        <key>begin</key>
        <string>
          (?x)
          (&lt;/?)
          (
          (?:
          ([-_[:alnum:]]+)
          (:)
          )?
          ([-_[:alnum:]]+)
          )
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tag</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.tag</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.tag.namespace</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.tag.localname</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(/?&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tag</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#xml-attribute</string>
          </dict>
        </array>
      </dict>
      <key>xml-attribute</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>
              (?x)
              (?:^|\s+)
              (
              (?:
              ([-_[:alnum:]]+)
              (:)
              )?
              ([-_[:alnum:]]+)
              )
              (=)
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.other.attribute-name</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.other.attribute-name.namespace</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.colon</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.other.attribute-name.localname</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.equals</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#xml-string</string>
          </dict>
        </array>
      </dict>
      <key>xml-cdata</key>
      <dict>
        <key>name</key>
        <string>string.unquoted.cdata</string>
        <key>begin</key>
        <string>&lt;!\[CDATA\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]\]&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end</string>
          </dict>
        </dict>
      </dict>
      <key>xml-string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.quoted.single</string>
            <key>begin</key>
            <string>\'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#xml-character-entity</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
            <key>begin</key>
            <string>\"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#xml-character-entity</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>xml-character-entity</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.entity</string>
            <key>match</key>
            <string>
              (?x)
              (&amp;)
              (
              (?:[[:alpha:]:_][[:alnum:]:_.-]*)|
              (?:\#[[:digit:]]+)|
              (?:\#x[[:xdigit:]]+)
              )
              (;)
            </string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.constant</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.constant</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.bad-ampersand</string>
            <key>match</key>
            <string>&amp;</string>
          </dict>
        </array>
      </dict>
      <key>xml-comment</key>
      <dict>
        <key>name</key>
        <string>comment.block</string>
        <key>begin</key>
        <string>&lt;!--</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment</string>
          </dict>
        </dict>
        <key>end</key>
        <string>--&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment</string>
          </dict>
        </dict>
      </dict>
    </dict>
  </dict>
</plist>